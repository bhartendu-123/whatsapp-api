"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;














var _bcrypt = _interopRequireDefault(require("bcrypt"));


var _sessionUtil = require("../util/sessionUtil"); /*
 * Copyright 2021 WPPConnect Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function formatSession(session) {return session.split(':')[0];}const verifyToken = (req, res, next) => {const secureToken = req.serverOptions.secretKey;const { session } = req.params;const { authorization: token } = req.headers;if (!session) return res.status(401).send({ message: 'Session not informed' });try {
    let tokenDecrypt = '';
    let sessionDecrypt = '';

    try {
      sessionDecrypt = session.split(':')[0];
      tokenDecrypt = session.
      split(':')[1].
      replace(/_/g, '/').
      replace(/-/g, '+');
    } catch (error) {
      try {
        if (token && token !== '' && token.split(' ').length > 0) {
          const token_value = token.split(' ')[1];
          if (token_value)
          tokenDecrypt = token_value.replace(/_/g, '/').replace(/-/g, '+');else

          return res.status(401).json({
            message: 'Token is not present. Check your header and try again'
          });
        } else {
          return res.status(401).json({
            message: 'Token is not present. Check your header and try again'
          });
        }
      } catch (e) {
        req.logger.error(e);
        return res.status(401).json({
          error: 'Check that a Session and Token are correct',
          message: error
        });
      }
    }

    _bcrypt.default.compare(
      sessionDecrypt + secureToken,
      tokenDecrypt,
      function (err, result) {
        if (result) {
          req.session = formatSession(req.params.session);
          req.token = tokenDecrypt;
          req.client = _sessionUtil.clientsArray[req.session];
          next();
        } else {
          return res.
          status(401).
          json({ error: 'Check that the Session and Token are correct' });
        }
      }
    );
  } catch (error) {
    req.logger.error(error);
    return res.status(401).json({
      error: 'Check that the Session and Token are correct.',
      message: error
    });
  }
};var _default = exports.default =

verifyToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmNyeXB0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfc2Vzc2lvblV0aWwiLCJmb3JtYXRTZXNzaW9uIiwic2Vzc2lvbiIsInNwbGl0IiwidmVyaWZ5VG9rZW4iLCJyZXEiLCJyZXMiLCJuZXh0Iiwic2VjdXJlVG9rZW4iLCJzZXJ2ZXJPcHRpb25zIiwic2VjcmV0S2V5IiwicGFyYW1zIiwiYXV0aG9yaXphdGlvbiIsInRva2VuIiwiaGVhZGVycyIsInN0YXR1cyIsInNlbmQiLCJtZXNzYWdlIiwidG9rZW5EZWNyeXB0Iiwic2Vzc2lvbkRlY3J5cHQiLCJyZXBsYWNlIiwiZXJyb3IiLCJsZW5ndGgiLCJ0b2tlbl92YWx1ZSIsImpzb24iLCJlIiwibG9nZ2VyIiwiYmNyeXB0IiwiY29tcGFyZSIsImVyciIsInJlc3VsdCIsImNsaWVudCIsImNsaWVudHNBcnJheSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlkZGxld2FyZS9hdXRoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAyMSBXUFBDb25uZWN0IFRlYW1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0JztcbmltcG9ydCB7IE5leHRGdW5jdGlvbiwgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcblxuaW1wb3J0IHsgY2xpZW50c0FycmF5IH0gZnJvbSAnLi4vdXRpbC9zZXNzaW9uVXRpbCc7XG5cbmZ1bmN0aW9uIGZvcm1hdFNlc3Npb24oc2Vzc2lvbjogc3RyaW5nKSB7XG4gIHJldHVybiBzZXNzaW9uLnNwbGl0KCc6JylbMF07XG59XG5cbmNvbnN0IHZlcmlmeVRva2VuID0gKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG4gIGNvbnN0IHNlY3VyZVRva2VuID0gcmVxLnNlcnZlck9wdGlvbnMuc2VjcmV0S2V5O1xuXG4gIGNvbnN0IHsgc2Vzc2lvbiB9ID0gcmVxLnBhcmFtcztcbiAgY29uc3QgeyBhdXRob3JpemF0aW9uOiB0b2tlbiB9ID0gcmVxLmhlYWRlcnM7XG4gIGlmICghc2Vzc2lvbilcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLnNlbmQoeyBtZXNzYWdlOiAnU2Vzc2lvbiBub3QgaW5mb3JtZWQnIH0pO1xuXG4gIHRyeSB7XG4gICAgbGV0IHRva2VuRGVjcnlwdCA9ICcnO1xuICAgIGxldCBzZXNzaW9uRGVjcnlwdCA9ICcnO1xuXG4gICAgdHJ5IHtcbiAgICAgIHNlc3Npb25EZWNyeXB0ID0gc2Vzc2lvbi5zcGxpdCgnOicpWzBdO1xuICAgICAgdG9rZW5EZWNyeXB0ID0gc2Vzc2lvblxuICAgICAgICAuc3BsaXQoJzonKVsxXVxuICAgICAgICAucmVwbGFjZSgvXy9nLCAnLycpXG4gICAgICAgIC5yZXBsYWNlKC8tL2csICcrJyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh0b2tlbiAmJiB0b2tlbiAhPT0gJycgJiYgdG9rZW4uc3BsaXQoJyAnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgdG9rZW5fdmFsdWUgPSB0b2tlbi5zcGxpdCgnICcpWzFdO1xuICAgICAgICAgIGlmICh0b2tlbl92YWx1ZSlcbiAgICAgICAgICAgIHRva2VuRGVjcnlwdCA9IHRva2VuX3ZhbHVlLnJlcGxhY2UoL18vZywgJy8nKS5yZXBsYWNlKC8tL2csICcrJyk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1Rva2VuIGlzIG5vdCBwcmVzZW50LiBDaGVjayB5b3VyIGhlYWRlciBhbmQgdHJ5IGFnYWluJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgICAgICBtZXNzYWdlOiAnVG9rZW4gaXMgbm90IHByZXNlbnQuIENoZWNrIHlvdXIgaGVhZGVyIGFuZCB0cnkgYWdhaW4nLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlcS5sb2dnZXIuZXJyb3IoZSk7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgICAgZXJyb3I6ICdDaGVjayB0aGF0IGEgU2Vzc2lvbiBhbmQgVG9rZW4gYXJlIGNvcnJlY3QnLFxuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBiY3J5cHQuY29tcGFyZShcbiAgICAgIHNlc3Npb25EZWNyeXB0ICsgc2VjdXJlVG9rZW4sXG4gICAgICB0b2tlbkRlY3J5cHQsXG4gICAgICBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHJlcS5zZXNzaW9uID0gZm9ybWF0U2Vzc2lvbihyZXEucGFyYW1zLnNlc3Npb24pO1xuICAgICAgICAgIHJlcS50b2tlbiA9IHRva2VuRGVjcnlwdDtcbiAgICAgICAgICByZXEuY2xpZW50ID0gY2xpZW50c0FycmF5W3JlcS5zZXNzaW9uXTtcbiAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICAgICAgLnN0YXR1cyg0MDEpXG4gICAgICAgICAgICAuanNvbih7IGVycm9yOiAnQ2hlY2sgdGhhdCB0aGUgU2Vzc2lvbiBhbmQgVG9rZW4gYXJlIGNvcnJlY3QnIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXEubG9nZ2VyLmVycm9yKGVycm9yKTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgZXJyb3I6ICdDaGVjayB0aGF0IHRoZSBTZXNzaW9uIGFuZCBUb2tlbiBhcmUgY29ycmVjdC4nLFxuICAgICAgbWVzc2FnZTogZXJyb3IsXG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHZlcmlmeVRva2VuO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7OztBQUdBLElBQUFDLFlBQUEsR0FBQUQsT0FBQSx3QkFBbUQsQ0FsQm5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQU1BLFNBQVNFLGFBQWFBLENBQUNDLE9BQWUsRUFB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